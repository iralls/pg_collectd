LoadPlugin postgresql

<Plugin postgresql>

	<Query table_size>
		Statement "SELECT
						relname AS table_name,
						SUM(pg_total_relation_size(C.oid)) AS table_size
					FROM pg_class C
						LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
					WHERE nspname NOT IN ('pg_catalog', 'information_schema')
						AND C.relkind <> 'i'
						AND nspname !~ '^pg_toast'
					GROUP BY relname;"

		<Result>
			Type gauge
			InstancePrefix "table_size"
			InstancesFrom "table_name"
			ValuesFrom "table_size"
		</Result>
	</Query>

	<Query index_size>
		Statement "SELECT
						indexname AS index_name,
						COALESCE(SUM(pg_relation_size(quote_ident(indexrelname)::text)), 0) AS index_size,
						COALESCE(SUM(idx_tup_read), 0) AS idx_tup_read,
						COALESCE(SUM(idx_tup_fetch), 0) AS idx_tup_fetch
					FROM pg_tables t
					LEFT OUTER JOIN pg_class c ON t.tablename=c.relname
					LEFT OUTER JOIN
						( SELECT c.relname AS ctablename, ipg.relname AS indexname, x.indnatts AS number_of_columns, idx_scan, idx_tup_read, idx_tup_fetch, indexrelname, indisunique FROM pg_index x
						JOIN pg_class c ON c.oid = x.indrelid
						JOIN pg_class ipg ON ipg.oid = x.indexrelid
						JOIN pg_stat_all_indexes psai ON x.indexrelid = psai.indexrelid )
						AS foo
					ON t.tablename = foo.ctablename
					WHERE
						t.schemaname='public' AND
						indexname IS NOT NULL
					GROUP BY index_name;"

		<Result>
			Type gauge
			InstancePrefix "index_size"
			InstancesFrom "index_name"
			ValuesFrom "index_size"
		</Result>
		<Result>
			Type gauge
			InstancePrefix  "idx_tup_read"
			InstancesFrom "index_name"
			ValuesFrom "idx_tup_read"
		</Result>
		<Result>
			Type gauge
			InstancePrefix  "idx_tup_fetch"
			InstancesFrom "index_name"
			ValuesFrom "idx_tup_fetch"
		</Result>
	</Query>

	<Query table_cache_hit>
		Statement = "SELECT
						relname AS table_name,
						COALESCE(SUM(heap_blks_read), 0) AS block_reads,
						COALESCE(SUM(heap_blks_hit), 0) AS buffer_hit,
						(COALESCE(SUM(heap_blks_hit), 0) / GREATEST(SUM(heap_blks_hit) + SUM(heap_blks_read), 1)::decimal) * 100 AS ratio
					FROM pg_statio_user_tables
					GROUP BY table_name;"

		<Result>
			Type gauge
			InstancePrefix "table_block_reads"
			InstancesFrom "table_name"
			ValuesFrom "block_reads"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "table_buffer_hits"
			InstancesFrom "table_name"
			ValuesFrom "buffer_hit"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "table_cache_hit_ratio"
			InstancesFrom "table_name"
			ValuesFrom "ratio"
		</Result>
	</Query>

	<Query index_cache_hit>
		Statement = "SELECT
						indexrelname AS index_name,
						COALESCE(SUM(idx_blks_read), 0) AS block_reads,
						COALESCE(SUM(idx_blks_hit), 0) AS buffer_hits,
						(COALESCE(SUM(idx_blks_hit), 0) / GREATEST(SUM(idx_blks_hit) + SUM(idx_blks_read), 1)::decimal) * 100 AS ratio
					FROM pg_statio_user_indexes
					GROUP BY index_name;"

		<Result>
			Type gauge
			InstancePrefix "index_block_reads"
			InstancesFrom "index_name"
			ValuesFrom "block_reads"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "index_buffer_hits"
			InstancesFrom "index_name"
			ValuesFrom "buffer_hits"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "index_cache_hit_ratio"
			InstancesFrom "index_name"
			ValuesFrom "ratio"
		</Result>
	</Query>

	<Query pg_procedure_stats>
		# this is based on a view created in sql/all.sql
		Statement = "SELECT average_time, percent_of_queries, query_short FROM pg_procedure_stats;"

		<Result>
			Type gauge
			InstancePrefix "average_time"
			InstancesFrom "query_short"
			ValuesFrom "average_time"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "percentage_of_queries"
			InstancesFrom "query_short"
			ValuesFrom "percent_of_queries"
		</Result>
	</Query>

	<Query num_backends>
		Statement = "SELECT sum(numbackends) as num_connections FROM pg_stat_database;"

		<Result>
			Type gauge
			InstancePrefix "num_connections"
			ValuesFrom "num_connections"
		</Result>
	</Query>

	<Query db_totals>
		Statement = "SELECT datname,
						tup_returned,
						tup_fetched
				FROM pg_stat_database"

		<Result>
			Type derive
			InstancePrefix "db_rows_returned"
			InstancesFrom "datname"
			ValuesFrom "tup_returned"
		</Result>

		<Result>
			Type derive
			InstancePrefix "db_rows_fetched"
			InstancesFrom "datname"
			ValuesFrom "tup_fetched"
		</Result>
	</Query>

	<Query pg_stat_user_tables_gauge>
		Statement = "SELECT relname AS table_name,
						SUM(autoanalyze_count) AS num_analyzes,
						SUM(autovacuum_count) AS num_vacuums,
						SUM(n_dead_tup) AS dead_tuples,
						SUM(n_live_tup) AS num_rows,
						SUM(seq_scan) AS num_seq_scans,
						SUM(seq_tup_read) AS num_rows_from_seq_scans,
						COALESCE(SUM(idx_scan), 0) AS num_idx_scans,
						COALESCE(SUM(idx_tup_fetch), 0) AS num_rows_from_idx_scans
				FROM pg_stat_user_tables
				GROUP BY table_name"

		<Result>
			Type gauge
			InstancePrefix "num_rows"
			InstancesFrom "table_name"
			ValuesFrom "num_rows"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_seq_scans"
			InstancesFrom "table_name"
			ValuesFrom "num_seq_scans"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_rows_from_seq_scans"
			InstancesFrom "table_name"
			ValuesFrom "num_rows_from_seq_scans"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_idx_scans"
			InstancesFrom "table_name"
			ValuesFrom "num_idx_scans"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_rows_from_idx_scans"
			InstancesFrom "table_name"
			ValuesFrom "num_rows_from_idx_scans"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_analyzes"
			InstancesFrom "table_name"
			ValuesFrom "num_analyzes"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_vacuums"
			InstancesFrom "table_name"
			ValuesFrom "num_vacuums"
		</Result>
		<Result>
			Type gauge
			InstancePrefix "num_dead_tuples"
			InstancesFrom "table_name"
			ValuesFrom "dead_tuples"
		</Result>
	</Query>

	<Query pg_stat_user_tables_derive>
		Statement = "SELECT relname AS table_name,
						SUM(n_tup_ins) AS num_inserts,
						SUM(n_tup_upd) AS num_updates,
						SUM(n_tup_del) AS num_deletes,
						SUM(n_tup_hot_upd) AS num_hot_updates
				FROM pg_stat_user_tables
				GROUP BY table_name"

		<Result>
			Type derive
			InstancePrefix "num_inserts"
			InstancesFrom "table_name"
			ValuesFrom "num_inserts"
		</Result>
		<Result>
			Type derive
			InstancePrefix "num_updates"
			InstancesFrom "table_name"
			ValuesFrom "num_updates"
		</Result>
		<Result>
			Type derive
			InstancePrefix "num_hot_updates"
			InstancesFrom "table_name"
			ValuesFrom "num_hot_updates"
		</Result>
		<Result>
			Type derive
			InstancePrefix "num_deletes"
			InstancesFrom "table_name"
			ValuesFrom "num_deletes"
		</Result>
	</Query>

	<Database FIXME>
		Host "localhost"
		Port "5432"
		User "postgres"
		Password "FIXME"
		Query "table_size"
		Query "index_size"
		Query "table_cache_hit"
		Query "index_cache_hit"
		Query "pg_procedure_stats"
		Query "num_backends"
		Query "db_totals"
		Query "pg_stat_user_tables_gauge"
		Query "pg_stat_user_tables_derive"
	</Database>
</Plugin>
